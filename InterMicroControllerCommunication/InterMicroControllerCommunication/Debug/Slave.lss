
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000011  00800060  00800060  000001aa  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000013a  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000008c  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000086  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018d  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00000641  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 37       	cpi	r26, 0x71	; 113
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <setup>:
};


void setup()
{
	DDRA = 0b11011110; //1 dataReadComplete dataSent ReadyToRead 111 DataReady
  7c:	8e ed       	ldi	r24, 0xDE	; 222
  7e:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xff;
  84:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00;	
  86:	11 ba       	out	0x11, r1	; 17
  88:	08 95       	ret

0000008a <readData>:
}

void readData()
{
	if((DATAREADY & PINA) == 1)
  8a:	c8 9b       	sbis	0x19, 0	; 25
  8c:	17 c0       	rjmp	.+46     	; 0xbc <readData+0x32>
	{
		DDRD = 0x00;
  8e:	11 ba       	out	0x11, r1	; 17
		PORTB = (PORTB | 0b00000001);
  90:	c0 9a       	sbi	0x18, 0	; 24
		PORTA = READYTOREAD;
  92:	80 e1       	ldi	r24, 0x10	; 16
  94:	8b bb       	out	0x1b, r24	; 27
		while((DATASENT & PINA) == 0)
  96:	cd 99       	sbic	0x19, 5	; 25
  98:	05 c0       	rjmp	.+10     	; 0xa4 <readData+0x1a>
		{
			pinAStatus = PINA;
  9a:	89 b3       	in	r24, 0x19	; 25
  9c:	80 93 70 00 	sts	0x0070, r24
	if((DATAREADY & PINA) == 1)
	{
		DDRD = 0x00;
		PORTB = (PORTB | 0b00000001);
		PORTA = READYTOREAD;
		while((DATASENT & PINA) == 0)
  a0:	cd 9b       	sbis	0x19, 5	; 25
  a2:	fb cf       	rjmp	.-10     	; 0x9a <readData+0x10>
			//if((DATAREADY && PINA) == 0)
			//	return;
		}
//		if((DATASENT & PINA) == 1)
		{
			PORTB = (PORTB | 0b00000010);
  a4:	c1 9a       	sbi	0x18, 1	; 24
			rcvdData[0] = PIND;
  a6:	80 b3       	in	r24, 0x10	; 16
  a8:	80 93 60 00 	sts	0x0060, r24
			PORTC = 0b00000111;
  ac:	87 e0       	ldi	r24, 0x07	; 7
  ae:	85 bb       	out	0x15, r24	; 21
			PORTB = PIND; 
  b0:	80 b3       	in	r24, 0x10	; 16
  b2:	88 bb       	out	0x18, r24	; 24
			DDRD = 0xff;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	81 bb       	out	0x11, r24	; 17
			PORTA = DATAREADCOMPLETE;
  b8:	80 e4       	ldi	r24, 0x40	; 64
  ba:	8b bb       	out	0x1b, r24	; 27
		}
	}
	track++;
  bc:	20 91 68 00 	lds	r18, 0x0068
  c0:	30 91 69 00 	lds	r19, 0x0069
  c4:	40 91 6a 00 	lds	r20, 0x006A
  c8:	50 91 6b 00 	lds	r21, 0x006B
  cc:	60 91 6c 00 	lds	r22, 0x006C
  d0:	70 91 6d 00 	lds	r23, 0x006D
  d4:	80 91 6e 00 	lds	r24, 0x006E
  d8:	90 91 6f 00 	lds	r25, 0x006F
  dc:	a1 e0       	ldi	r26, 0x01	; 1
  de:	0e 94 8d 00 	call	0x11a	; 0x11a <__adddi3_s8>
  e2:	20 93 68 00 	sts	0x0068, r18
  e6:	30 93 69 00 	sts	0x0069, r19
  ea:	40 93 6a 00 	sts	0x006A, r20
  ee:	50 93 6b 00 	sts	0x006B, r21
  f2:	60 93 6c 00 	sts	0x006C, r22
  f6:	70 93 6d 00 	sts	0x006D, r23
  fa:	80 93 6e 00 	sts	0x006E, r24
  fe:	90 93 6f 00 	sts	0x006F, r25
 102:	08 95       	ret

00000104 <writeData>:
}

void writeData()
{
	PORTB = rcvdData[0];
 104:	80 91 60 00 	lds	r24, 0x0060
 108:	88 bb       	out	0x18, r24	; 24
 10a:	08 95       	ret

0000010c <main>:
}

int main(void)
{
	setup();
 10c:	0e 94 3e 00 	call	0x7c	; 0x7c <setup>
	while(1)
	{
		readData();
 110:	0e 94 45 00 	call	0x8a	; 0x8a <readData>
		writeData();		
 114:	0e 94 82 00 	call	0x104	; 0x104 <writeData>
 118:	fb cf       	rjmp	.-10     	; 0x110 <main+0x4>

0000011a <__adddi3_s8>:
 11a:	00 24       	eor	r0, r0
 11c:	a7 fd       	sbrc	r26, 7
 11e:	00 94       	com	r0
 120:	2a 0f       	add	r18, r26
 122:	30 1d       	adc	r19, r0
 124:	40 1d       	adc	r20, r0
 126:	50 1d       	adc	r21, r0
 128:	60 1d       	adc	r22, r0
 12a:	70 1d       	adc	r23, r0
 12c:	80 1d       	adc	r24, r0
 12e:	90 1d       	adc	r25, r0
 130:	08 95       	ret

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
