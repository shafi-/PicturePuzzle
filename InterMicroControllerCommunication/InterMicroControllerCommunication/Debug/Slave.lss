
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000012  00800060  00800060  000001e0  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000018b  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000bc  00000000  00000000  000003db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000b1  00000000  00000000  00000497  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000064  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001a0  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000004e  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  0000079a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 37       	cpi	r26, 0x72	; 114
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  74:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <setup>:
};


void setup()
{
	DDRA = 0b11011110; //1 dataReadComplete dataSent ReadyToRead 111 DataReady
  7c:	8e ed       	ldi	r24, 0xDE	; 222
  7e:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xff;
  84:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00;	
  86:	11 ba       	out	0x11, r1	; 17
  88:	08 95       	ret

0000008a <readData>:
}

void readData()
{
	while(data_number < 8)
  8a:	80 91 70 00 	lds	r24, 0x0070
  8e:	88 30       	cpi	r24, 0x08	; 8
  90:	18 f5       	brcc	.+70     	; 0xd8 <readData+0x4e>
	{
		DDRD = 0x00;
		PORTB = (PORTB | 0b00000001);
		PORTA = READYTOREAD;
  92:	50 e1       	ldi	r21, 0x10	; 16
//		if((DATASENT & PINA) == 1)
		{
			PORTB = (PORTB | 0b00000010);
			rcvdData[data_number] = PIND;
			data_number++;
			PORTC = 0b00000111;
  94:	47 e0       	ldi	r20, 0x07	; 7
			PORTB = PIND; 
			DDRD = 0xff;
  96:	3f ef       	ldi	r19, 0xFF	; 255
			PORTA = DATAREADCOMPLETE;
  98:	20 e4       	ldi	r18, 0x40	; 64

void readData()
{
	while(data_number < 8)
	{
		DDRD = 0x00;
  9a:	11 ba       	out	0x11, r1	; 17
		PORTB = (PORTB | 0b00000001);
  9c:	c0 9a       	sbi	0x18, 0	; 24
		PORTA = READYTOREAD;
  9e:	5b bb       	out	0x1b, r21	; 27
		while((DATASENT & PINA) == 0)
  a0:	cd 99       	sbic	0x19, 5	; 25
  a2:	05 c0       	rjmp	.+10     	; 0xae <readData+0x24>
		{
			pinAStatus = PINA;
  a4:	89 b3       	in	r24, 0x19	; 25
  a6:	80 93 71 00 	sts	0x0071, r24
	while(data_number < 8)
	{
		DDRD = 0x00;
		PORTB = (PORTB | 0b00000001);
		PORTA = READYTOREAD;
		while((DATASENT & PINA) == 0)
  aa:	cd 9b       	sbis	0x19, 5	; 25
  ac:	fb cf       	rjmp	.-10     	; 0xa4 <readData+0x1a>
			//if((DATAREADY && PINA) == 0)
			//	return;
		}
//		if((DATASENT & PINA) == 1)
		{
			PORTB = (PORTB | 0b00000010);
  ae:	c1 9a       	sbi	0x18, 1	; 24
			rcvdData[data_number] = PIND;
  b0:	80 91 70 00 	lds	r24, 0x0070
  b4:	90 b3       	in	r25, 0x10	; 16
  b6:	e8 2f       	mov	r30, r24
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	e0 5a       	subi	r30, 0xA0	; 160
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	90 83       	st	Z, r25
			data_number++;
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	80 93 70 00 	sts	0x0070, r24
			PORTC = 0b00000111;
  c6:	45 bb       	out	0x15, r20	; 21
			PORTB = PIND; 
  c8:	80 b3       	in	r24, 0x10	; 16
  ca:	88 bb       	out	0x18, r24	; 24
			DDRD = 0xff;
  cc:	31 bb       	out	0x11, r19	; 17
			PORTA = DATAREADCOMPLETE;
  ce:	2b bb       	out	0x1b, r18	; 27
	DDRD = 0x00;	
}

void readData()
{
	while(data_number < 8)
  d0:	80 91 70 00 	lds	r24, 0x0070
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	08 f3       	brcs	.-62     	; 0x9a <readData+0x10>
			PORTB = PIND; 
			DDRD = 0xff;
			PORTA = DATAREADCOMPLETE;
		}
	}
	track++;
  d8:	20 91 68 00 	lds	r18, 0x0068
  dc:	30 91 69 00 	lds	r19, 0x0069
  e0:	40 91 6a 00 	lds	r20, 0x006A
  e4:	50 91 6b 00 	lds	r21, 0x006B
  e8:	60 91 6c 00 	lds	r22, 0x006C
  ec:	70 91 6d 00 	lds	r23, 0x006D
  f0:	80 91 6e 00 	lds	r24, 0x006E
  f4:	90 91 6f 00 	lds	r25, 0x006F
  f8:	a1 e0       	ldi	r26, 0x01	; 1
  fa:	0e 94 a8 00 	call	0x150	; 0x150 <__adddi3_s8>
  fe:	20 93 68 00 	sts	0x0068, r18
 102:	30 93 69 00 	sts	0x0069, r19
 106:	40 93 6a 00 	sts	0x006A, r20
 10a:	50 93 6b 00 	sts	0x006B, r21
 10e:	60 93 6c 00 	sts	0x006C, r22
 112:	70 93 6d 00 	sts	0x006D, r23
 116:	80 93 6e 00 	sts	0x006E, r24
 11a:	90 93 6f 00 	sts	0x006F, r25
 11e:	08 95       	ret

00000120 <receiveAllData>:
}

void receiveAllData()
{
	if((DATAREADY & PINA) == 1)
 120:	c8 9b       	sbis	0x19, 0	; 25
 122:	04 c0       	rjmp	.+8      	; 0x12c <receiveAllData+0xc>
	{
		data_number = 0;
 124:	10 92 70 00 	sts	0x0070, r1
		readData();
 128:	0e 94 45 00 	call	0x8a	; 0x8a <readData>
 12c:	08 95       	ret

0000012e <writeData>:
	}
}

void writeData()
{
 12e:	e0 e6       	ldi	r30, 0x60	; 96
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	88 e6       	ldi	r24, 0x68	; 104
 134:	90 e0       	ldi	r25, 0x00	; 0
	for(unsigned char k=0; k<8; k++)
		PORTB = rcvdData[k];
 136:	21 91       	ld	r18, Z+
 138:	28 bb       	out	0x18, r18	; 24
	}
}

void writeData()
{
	for(unsigned char k=0; k<8; k++)
 13a:	e8 17       	cp	r30, r24
 13c:	f9 07       	cpc	r31, r25
 13e:	d9 f7       	brne	.-10     	; 0x136 <writeData+0x8>
		PORTB = rcvdData[k];
}
 140:	08 95       	ret

00000142 <main>:

int main(void)
{
	setup();
 142:	0e 94 3e 00 	call	0x7c	; 0x7c <setup>
	while(1)
	{
		receiveAllData();
 146:	0e 94 90 00 	call	0x120	; 0x120 <receiveAllData>
		writeData();		
 14a:	0e 94 97 00 	call	0x12e	; 0x12e <writeData>
 14e:	fb cf       	rjmp	.-10     	; 0x146 <main+0x4>

00000150 <__adddi3_s8>:
 150:	00 24       	eor	r0, r0
 152:	a7 fd       	sbrc	r26, 7
 154:	00 94       	com	r0
 156:	2a 0f       	add	r18, r26
 158:	30 1d       	adc	r19, r0
 15a:	40 1d       	adc	r20, r0
 15c:	50 1d       	adc	r21, r0
 15e:	60 1d       	adc	r22, r0
 160:	70 1d       	adc	r23, r0
 162:	80 1d       	adc	r24, r0
 164:	90 1d       	adc	r25, r0
 166:	08 95       	ret

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
