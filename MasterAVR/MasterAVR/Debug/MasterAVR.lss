
MasterAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000b  00800060  00800060  000001d2  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000011c  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000008c  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000075  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014f  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  000005e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  8a:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setup>:
uint64_t track = 0;
unsigned char statusA;
	
void setup()
{
	DDRA = 0b00101111; // in in_dataReadComplete out_dataSent in_readyToRead out_dataReady1 out_dataReady2 out_dataReady3 out_dataReady4 
  92:	8f e2       	ldi	r24, 0x2F	; 47
  94:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x00;
  96:	11 ba       	out	0x11, r1	; 17
	DDRB = 0x00;
  98:	17 ba       	out	0x17, r1	; 23
  9a:	08 95       	ret

0000009c <sendData>:
}

void sendData()
{
	PORTA = DATAREADY;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	8b bb       	out	0x1b, r24	; 27
	statusA = DATAREADY;
  a0:	80 93 6a 00 	sts	0x006A, r24
	while((READYTOREAD & PINA) == 0)
  a4:	cc 99       	sbic	0x19, 4	; 25
  a6:	05 c0       	rjmp	.+10     	; 0xb2 <sendData+0x16>
	{
		statusA = PINA;
  a8:	89 b3       	in	r24, 0x19	; 25
  aa:	80 93 6a 00 	sts	0x006A, r24

void sendData()
{
	PORTA = DATAREADY;
	statusA = DATAREADY;
	while((READYTOREAD & PINA) == 0)
  ae:	cc 9b       	sbis	0x19, 4	; 25
  b0:	fb cf       	rjmp	.-10     	; 0xa8 <sendData+0xc>
	{
		statusA = PINA;
	}
	DDRD = 0xff;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b01010101;
  b6:	85 e5       	ldi	r24, 0x55	; 85
  b8:	82 bb       	out	0x12, r24	; 18
	PORTA = DATASENT;
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	8b bb       	out	0x1b, r24	; 27
	statusA = DATASENT;
  be:	80 93 6a 00 	sts	0x006A, r24
	while((DATAREADCOMPLETE & PINA) == 0)
  c2:	ce 99       	sbic	0x19, 6	; 25
  c4:	05 c0       	rjmp	.+10     	; 0xd0 <sendData+0x34>
	{
		statusA = PINA;
  c6:	89 b3       	in	r24, 0x19	; 25
  c8:	80 93 6a 00 	sts	0x006A, r24
	}
	DDRD = 0xff;
	PORTD = 0b01010101;
	PORTA = DATASENT;
	statusA = DATASENT;
	while((DATAREADCOMPLETE & PINA) == 0)
  cc:	ce 9b       	sbis	0x19, 6	; 25
  ce:	fb cf       	rjmp	.-10     	; 0xc6 <sendData+0x2a>
	{
		statusA = PINA;
	}
	PORTA = 0x00; 
  d0:	1b ba       	out	0x1b, r1	; 27
	isSent = 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	90 93 69 00 	sts	0x0069, r25
  da:	80 93 68 00 	sts	0x0068, r24
	DDRD = 0x00;
  de:	11 ba       	out	0x11, r1	; 17
	PORTA = 0x00;
  e0:	1b ba       	out	0x1b, r1	; 27
  e2:	08 95       	ret

000000e4 <main>:
}
int main(void)
{
	setup();
  e4:	0e 94 49 00 	call	0x92	; 0x92 <setup>
  e8:	25 c0       	rjmp	.+74     	; 0x134 <main+0x50>
    while(1)
    {
        //TODO:: Please write your application code 
		while(isSent == 0)
		{
			track++;
  ea:	20 91 60 00 	lds	r18, 0x0060
  ee:	30 91 61 00 	lds	r19, 0x0061
  f2:	40 91 62 00 	lds	r20, 0x0062
  f6:	50 91 63 00 	lds	r21, 0x0063
  fa:	60 91 64 00 	lds	r22, 0x0064
  fe:	70 91 65 00 	lds	r23, 0x0065
 102:	80 91 66 00 	lds	r24, 0x0066
 106:	90 91 67 00 	lds	r25, 0x0067
 10a:	a1 e0       	ldi	r26, 0x01	; 1
 10c:	0e 94 a1 00 	call	0x142	; 0x142 <__adddi3_s8>
 110:	20 93 60 00 	sts	0x0060, r18
 114:	30 93 61 00 	sts	0x0061, r19
 118:	40 93 62 00 	sts	0x0062, r20
 11c:	50 93 63 00 	sts	0x0063, r21
 120:	60 93 64 00 	sts	0x0064, r22
 124:	70 93 65 00 	sts	0x0065, r23
 128:	80 93 66 00 	sts	0x0066, r24
 12c:	90 93 67 00 	sts	0x0067, r25
			sendData();
 130:	0e 94 4e 00 	call	0x9c	; 0x9c <sendData>
	setup();
//	sendData();
    while(1)
    {
        //TODO:: Please write your application code 
		while(isSent == 0)
 134:	80 91 68 00 	lds	r24, 0x0068
 138:	90 91 69 00 	lds	r25, 0x0069
 13c:	89 2b       	or	r24, r25
 13e:	a9 f2       	breq	.-86     	; 0xea <main+0x6>
 140:	ff cf       	rjmp	.-2      	; 0x140 <main+0x5c>

00000142 <__adddi3_s8>:
 142:	00 24       	eor	r0, r0
 144:	a7 fd       	sbrc	r26, 7
 146:	00 94       	com	r0
 148:	2a 0f       	add	r18, r26
 14a:	30 1d       	adc	r19, r0
 14c:	40 1d       	adc	r20, r0
 14e:	50 1d       	adc	r21, r0
 150:	60 1d       	adc	r22, r0
 152:	70 1d       	adc	r23, r0
 154:	80 1d       	adc	r24, r0
 156:	90 1d       	adc	r25, r0
 158:	08 95       	ret

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
